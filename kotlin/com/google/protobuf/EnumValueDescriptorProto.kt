// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: google/protobuf/descriptor.proto
package com.google.protobuf

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import com.squareup.wire.WireField
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Describes a value within an enum.
 */
data class EnumValueDescriptorProto(
  @field:WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING") val name: String? =
      null,
  @field:WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#INT32") val number: Int? =
      null,
  @field:WireField(tag = 3, adapter = "com.google.protobuf.EnumValueOptions#ADAPTER") val options:
      EnumValueOptions? = null,
  val unknownFields: ByteString = ByteString.EMPTY
) : Message<EnumValueDescriptorProto, EnumValueDescriptorProto.Builder>(ADAPTER, unknownFields) {
  @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Builder = Builder(this.copy())

  class Builder(private val message: EnumValueDescriptorProto) :
      Message.Builder<EnumValueDescriptorProto, Builder>() {
    override fun build(): EnumValueDescriptorProto = message
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<EnumValueDescriptorProto> = object :
        ProtoAdapter<EnumValueDescriptorProto>(
      FieldEncoding.LENGTH_DELIMITED, 
      EnumValueDescriptorProto::class.java
    ) {
      override fun encodedSize(value: EnumValueDescriptorProto): Int = 
        ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) +
        ProtoAdapter.INT32.encodedSizeWithTag(2, value.number) +
        EnumValueOptions.ADAPTER.encodedSizeWithTag(3, value.options) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: EnumValueDescriptorProto) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.number)
        EnumValueOptions.ADAPTER.encodeWithTag(writer, 3, value.options)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): EnumValueDescriptorProto {
        var name: String? = null
        var number: Int? = null
        var options: EnumValueOptions? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> number = ProtoAdapter.INT32.decode(reader)
            3 -> options = EnumValueOptions.ADAPTER.decode(reader)
            else -> TagHandler.UNKNOWN_TAG
          }
        }
        return EnumValueDescriptorProto(
          name = name,
          number = number,
          options = options,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: EnumValueDescriptorProto): EnumValueDescriptorProto? = value.copy(
        options = value.options?.let(EnumValueOptions.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }
  }
}
