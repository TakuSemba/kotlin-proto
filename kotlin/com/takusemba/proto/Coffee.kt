// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: coffee.proto
package com.takusemba.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import com.squareup.wire.WireField
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import okio.ByteString

data class Coffee(
  /**
   * espresso
   */
  @field:WireField(tag = 1, adapter = "com.squareup.wire.ProtoAdapter#STRING") val name: String? =
      null,
  /**
   * 340
   */
  @field:WireField(tag = 2, adapter = "com.squareup.wire.ProtoAdapter#DOUBLE") val price: Double? =
      null,
  /**
   * small / medium / large
   */
  @field:WireField(tag = 3, adapter = "com.takusemba.proto.Size#ADAPTER") val size: Size? = null,
  /**
   * true / false
   */
  @field:WireField(tag = 4, adapter = "com.squareup.wire.ProtoAdapter#BOOL") val isAvailable:
      Boolean? = null,
  val unknownFields: ByteString = ByteString.EMPTY
) : Message<Coffee, Coffee.Builder>(ADAPTER, unknownFields) {
  @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Builder = Builder(this.copy())

  class Builder(private val message: Coffee) : Message.Builder<Coffee, Builder>() {
    override fun build(): Coffee = message
  }

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<Coffee> = object : ProtoAdapter<Coffee>(
      FieldEncoding.LENGTH_DELIMITED, 
      Coffee::class.java
    ) {
      override fun encodedSize(value: Coffee): Int = 
        ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) +
        ProtoAdapter.DOUBLE.encodedSizeWithTag(2, value.price) +
        Size.ADAPTER.encodedSizeWithTag(3, value.size) +
        ProtoAdapter.BOOL.encodedSizeWithTag(4, value.isAvailable) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: Coffee) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.price)
        Size.ADAPTER.encodeWithTag(writer, 3, value.size)
        ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.isAvailable)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): Coffee {
        var name: String? = null
        var price: Double? = null
        var size: Size? = null
        var isAvailable: Boolean? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> price = ProtoAdapter.DOUBLE.decode(reader)
            3 -> size = Size.ADAPTER.decode(reader)
            4 -> isAvailable = ProtoAdapter.BOOL.decode(reader)
            else -> TagHandler.UNKNOWN_TAG
          }
        }
        return Coffee(
          name = name,
          price = price,
          size = size,
          isAvailable = isAvailable,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: Coffee): Coffee? = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }
  }
}
